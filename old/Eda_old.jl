include("Utils.jl")
include("Systems.jl")
include("Detectors.jl")

using Zygote
using Revise
using Trapz
using Plots
using LaTeXStrings
using HypergeometricFunctions: _‚ÇÇF‚ÇÅ
using LinearAlgebra: eigvals, cholesky, Diagonal
import Base.length, Base.collect, Base.values

using .Utils: geomspace
using .Detectors: Detector, LISA, S‚Çô
using .Systems: Binary

"""
Use SI units for simplicity
"""
G‚Çô = 6.67408e-11  # m^3 s^-2 kg^-1
c = 299792458.  # m/s
MSun = 1.98855e30  # kg
pc = 3.08567758149137e16 # m

function trapz_1d_mat(xs, ys)
    @assert length(xs) == length(ys)
    result = zeros(size(ys[1]))
    for i in range(1, stop=length(xs) - 1)
        result .+= (xs[i + 1] - xs[i]) * (ys[i + 1] + ys[i]) ./ 2
    end
    return result
end

struct EdaDress <: Binary
    ‚Ñ≥::AbstractFloat  # kg
    ùíú::AbstractFloat  # units?
    Œ±::AbstractFloat  # 1
    c‚Çë::AbstractFloat  # units?
    Œ¶_c::AbstractFloat
    tÃÉ_c::AbstractFloat
end

values(system::EdaDress) = [system.‚Ñ≥, system.ùíú, system.Œ±, system.c‚Çë, system.Œ¶_c, system.tÃÉ_c]
collect(system::EdaDress) = values(system)
length(::EdaDress) = 6
‚Ñ≥(m‚ÇÅ, m‚ÇÇ) = (m‚ÇÅ * m‚ÇÇ)^(3/5) / (m‚ÇÅ + m‚ÇÇ)^(1/5)
# r_isco(system::Binary) = 6 * G‚Çô * system.m‚ÇÅ / c^2
# f_isco(system::Binary) = ‚àö(G‚Çô * system.m‚ÇÅ / r_isco(system)^3) / œÄ

function Œ¶ÃÉ_indef(f‚Ä≤, f, system::EdaDress)
    coeff = 10/3 * (8 * œÄ * G‚Çô * system.‚Ñ≥ / c^3)^(-5/3)
    term_1 = -3 * f * f‚Ä≤^(1 - 2 * system.Œ± / 3) * G‚Çô^(-11/6 + system.Œ±/3) * œÄ^(11/3 - 2 * system.Œ±/3) * _‚ÇÇF‚ÇÅ(
        1,
        (3 - 2 * system.Œ±) / (11 - 2 * system.Œ±),
        (14 - 4 * system.Œ±) / (11 - 2 * system.Œ±),
        -f‚Ä≤^((11 - 2*system.Œ±) / 3) * G‚Çô^(-11/6+system.Œ±/3) * œÄ^(11/3-2*system.Œ±/3) / (4 * system.c‚Çë)
    ) / (4 * system.c‚Çë * (3 - 2 * system.Œ±))
    term_2 = -3 * f‚Ä≤^(2-2*system.Œ±/3) * G‚Çô^(-11/6+system.Œ±/3) * œÄ^(11/3-2*system.Œ±/3) * _‚ÇÇF‚ÇÅ(
        1,
        (6 - 2 * system.Œ±) / (11 - 2 * system.Œ±),
        (17 - 4 * system.Œ±) / (11 - 2 * system.Œ±),
        -f‚Ä≤^((11 - 2 * system.Œ±) / 3) * G‚Çô^(-11/6+system.Œ±/3) * œÄ^(11/3 - 2 * system.Œ±/3) / (4 * system.c‚Çë)
    ) / (8 * system.c‚Çë * (system.Œ± - 3))
    return coeff * (term_1 + term_2)
end

Œ¶ÃÉ(f, system::EdaDress) = Œ¶ÃÉ_indef(f, f, system) - Œ¶ÃÉ_indef(5, f, system)  # Œ¶ÃÉ_indef(f_isco(system), f, system)
Œ¥ÃÉ(f, system::EdaDress) = (G‚Çô / (œÄ * f)^2)^(1. - system.Œ± / 3)  # units
L(f, system::EdaDress) = 1. + 4 * system.c‚Çë * Œ¥ÃÉ(f, system)^((11 - 2 * system.Œ±) / (6 - 2 * system.Œ±))  # units!
amp‚Çä(f, system::EdaDress) = system.ùíú * f^(-7/6) * L(f, system)^(-1/2)
Œ®(f, system::EdaDress) = 2 * œÄ * f * system.tÃÉ_c -system.Œ¶_c - œÄ/4 - Œ¶ÃÉ(f, system)

function fim_integrand_num(f, system::EdaDress)
    ‚àÇamp‚Çä = collect(values(gradient(s -> amp‚Çä(f, s), system)[1]))
    ‚àÇamp‚Çä[‚àÇamp‚Çä .=== nothing] .= 0.
    ‚àÇamp‚Çä = convert(Array{Float64}, ‚àÇamp‚Çä)

    ‚àÇŒ® = collect(values(gradient(s -> Œ®(f, s), system)[1]))
    ‚àÇŒ®[‚àÇŒ® .=== nothing] .= 0.
    ‚àÇŒ® = convert(Array{Float64}, ‚àÇŒ®)

    # # Convert to log derivatives for intrinsic parameters
    # rescaling = [1., 1., system.‚Ñ≥, system.ùíú, system.Œ±, system.c‚Çë]
    # ‚àÇamp‚Çä .*= rescaling
    # ‚àÇŒ® .*= rescaling
    
    return 4 * (‚àÇamp‚Çä * ‚àÇamp‚Çä' + amp‚Çä(f, system)^2 * ‚àÇŒ® * ‚àÇŒ®')
end

# Specialize to LISA
S‚Çô_LISA(f) = 1 / f^14 * 1.80654e-17 * (0.000606151 + f^2) * (3.6864e-76 + 3.6e-37 * f^8 + 2.25e-30 * f^10 + 8.66941e-21 * f^14)

function fim(f‚Çó, f‚Çï, system::EdaDress, n)
    fs = geomspace(f‚Çó, f‚Çï, n)
    nums = map(f -> fim_integrand_num(f, system), fs)
    S‚Çôs = S‚Çô_LISA.(fs)
    return trapz_1d_mat(fs, nums ./ S‚Çôs)
end

function fim_uncertainties(f‚Çó, f‚Çï, system::EdaDress, n=1000)
    Œì = fim(f‚Çó, f‚Çï, system, n)
    Œì = (Œì .+ Œì') ./ 2

    # Improve stability
    scales = sqrt(inv(Diagonal(Œì)))
    Œìr = scales * Œì * scales
    Œ£ = scales * inv(Œìr) * scales

    # Checks
    # println("evs: ", eigvals(Œìr))
    @assert all(eigvals(Œìr) .> 0) eigvals(Œìr)

    return sqrt.([Œ£[i, i] for i in 1:size(Œ£)[1]])
end

function sig_noise_ratio(f‚Çó, f‚Çï, system::EdaDress, n::Int=5000)
    fs = geomspace(f‚Çó, f‚Çï, n)
    amp¬≤(f) = amp‚Çä(f, system)^2
    amp¬≤s = map(amp¬≤, fs)
    S‚Çôs = S‚Çô_LISA.(fs)
    return sqrt.(4 * trapz(fs, amp¬≤s ./ S‚Çôs))
end

"""
Builds an EdaDress. Units: [m‚ÇÅ] = [m‚ÇÇ] = M‚äô, [œÅ‚Çõ] = M‚äô / pc^3, [dL] = pc.
"""
function dd_factory(œÅ‚Çõ, Œ≥‚Çõ, m‚ÇÅ=1e3, m‚ÇÇ=1.0, dL=1e8, Œπ=0.)
    m‚ÇÅ *= MSun
    m‚ÇÇ *=  MSun
    œÅ‚Çõ *= MSun / pc^3
    dL *= pc
    Œπ = 0.
    Œ¶_c = 0.
    tÃÉ_c = 0. + dL / c

    # Jump through Eda+'s hoops
    ùíú = ‚àö(5/24) / œÄ^(2/3) * c / dL * (G‚Çô * ‚Ñ≥(m‚ÇÅ, m‚ÇÇ) / c^3)^(5/6) * (1 + cos(Œπ)^2) / 2
    r‚Çõ = 0.54 * pc
    r_min = 6 * G‚Çô * m‚ÇÅ / c^2
    m_dm = 4 * œÄ * r‚Çõ^Œ≥‚Çõ * œÅ‚Çõ * r_min^(3 - Œ≥‚Çõ) / (3 - Œ≥‚Çõ)
    M_eff = m‚ÇÅ - m_dm
    F = r_min^(Œ≥‚Çõ - 3) * G‚Çô * m_dm
    œµ = F / (G‚Çô * M_eff)
    Œõ = exp(3)
    c_df = 8 * œÄ * G‚Çô^2 * m‚ÇÇ * œÅ‚Çõ * r‚Çõ^Œ≥‚Çõ * log(Œõ) * (G‚Çô * M_eff)^(-3/2) * œµ^((2 * Œ≥‚Çõ - 3) / (6 - 2 * Œ≥‚Çõ))
    c_gw = 256 / 5 * (G‚Çô * m‚ÇÇ / c^3) * (G‚Çô * M_eff / c)^2 * œµ^(4 / (3 - Œ≥‚Çõ))
    cÃÉ = c_df / c_gw
    c‚Çë = M_eff^((11 - 2 * Œ≥‚Çõ) / 6) * cÃÉ * œµ^((11 - 2 * Œ≥‚Çõ) / (6 - 2 * Œ≥‚Çõ))

    return EdaDress(‚Ñ≥(m‚ÇÅ, m‚ÇÇ), ùíú, Œ≥‚Çõ, c‚Çë, Œ¶_c, tÃÉ_c)
end

f‚Çó = 2.26e-2  # frequency 5 years before merger (HACKY ESTIMATE)
f‚Çï = 4.39701  # ISCO frequency (HACKY ESTIMATE)
system = dd_factory(226., 7/3)
println("log10(Œî‚Ñ≥ / ‚Ñ≥) = ", log10.(fim_uncertainties(f‚Çó, f‚Çï, system, 100) ./ values(system))[1])
println("log10(ŒîŒ≥‚Çõ / Œ≥‚Çõ) = ", log10.(fim_uncertainties(f‚Çó, f‚Çï, system, 100) ./ values(system))[3])
println(log10.(fim_uncertainties(f‚Çó, f‚Çï, system, 10) ./ values(system))[1:end-2])
sig_noise_ratio(f‚Çó, f‚Çï, system, 1000)  # agrees with David's notebook

function plot_snr()
    log10_œÅ‚Çõs = -2:0.2:3
    Œ≥‚Çõs = 1.9:0.02:7/3

    f‚Çó = 2.26e-2  # frequency 5 years before merger (HACKY ESTIMATE)
    f‚Çï = 4.39701  # ISCO frequency (HACKY ESTIMATE)

    heatmap(
        log10_œÅ‚Çõs,
        Œ≥‚Çõs,
        (log10_œÅ‚Çõ, Œ≥‚Çõ) -> sig_noise_ratio(f‚Çó, f‚Çï, dd_factory(10^log10_œÅ‚Çõ, Œ≥‚Çõ)),
        clim=(8.7, 9.2)
    )
    xaxis!(L"\log_{10} \rho_s")
    yaxis!(L"\gamma_s")
end

function plot_ŒîŒ≥‚Çõ()
    log10_œÅ‚Çõs = -2:0.5:3
    Œ≥‚Çõs = 1.9:0.05:7/3

    f‚Çó = 2.26e-2  # frequency 5 years before merger (HACKY ESTIMATE)
    f‚Çï = 4.39701  # ISCO frequency (HACKY ESTIMATE)

    get_ŒîŒ≥‚Çõ(log10_œÅ‚Çõ, Œ≥‚Çõ) = log10(fim_uncertainties(f‚Çó, f‚Çï, dd_factory(10.0^log10_œÅ‚Çõ, Œ≥‚Çõ), 1000)[3] / Œ≥‚Çõ)

    heatmap(log10_œÅ‚Çõs, Œ≥‚Çõs, get_ŒîŒ≥‚Çõ)#, clim=(8.7, 9.2))
    xaxis!(L"\log_{10} \rho_s")
    yaxis!(L"\gamma_s")
end