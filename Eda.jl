include("Utils.jl")

using Zygote
using Revise
using Trapz
using Roots
using Plots
using LaTeXStrings
using HypergeometricFunctions: _‚ÇÇF‚ÇÅ
using LinearAlgebra: eigvals, cholesky, Diagonal
import Base.length, Base.collect, Base.values

using .Utils: geomspace

# SI units
G‚Çô = 6.67408e-11  # m^3 s^-2 kg^-1
c = 299792458.  # m/s
MSun = 1.98855e30  # kg
pc = 3.08567758149137e16 # m

‚Ñ≥(m‚ÇÅ, m‚ÇÇ) = (m‚ÇÅ * m‚ÇÇ)^(3/5) / (m‚ÇÅ + m‚ÇÇ)^(1/5)
r_isco(m‚ÇÅ) = 6 * G‚Çô * m‚ÇÅ / c^2
f_isco(m‚ÇÅ) = ‚àö(G‚Çô * m‚ÇÅ / r_isco(m‚ÇÅ)^3) / œÄ

function trapz_1d_mat(xs, ys)
    @assert length(xs) == length(ys)
    result = zeros(size(ys[1]))
    for i in range(1, stop=length(xs) - 1)
        result .+= (xs[i + 1] - xs[i]) * (ys[i + 1] + ys[i]) ./ 2
    end
    return result
end

struct EdaDress  # <: Binary
    Œ±::AbstractFloat  # 1
    c_f::AbstractFloat  # units?
    ‚Ñ≥::AbstractFloat  # kg
    Œ¶_c::AbstractFloat
    tÃÉ_c::AbstractFloat
    d‚Çó_Œπ::AbstractFloat
end

"""
Builds an EdaDress. Units: [m‚ÇÅ] = [m‚ÇÇ] = M‚äô, [œÅ‚Çõ] = M‚äô / pc^3, [dL] = pc.
"""
function make_EdaDress(œÅ‚Çõ, Œ≥‚Çõ, m‚ÇÅ=1e3, m‚ÇÇ=1.0, d‚Çó=1e8, Œπ=0.)
    m‚ÇÅ *= MSun
    m‚ÇÇ *=  MSun
    œÅ‚Çõ *= MSun / pc^3
    d‚Çó *= pc
    Œπ = 0.
    Œ¶_c = 0.
    tÃÉ_c = 0. + d‚Çó / c

    r‚Çõ = 0.54 * pc
    r‚Çõ = ((3 - Œ≥‚Çõ) * 0.2^(3 - Œ≥‚Çõ) * m‚ÇÅ / (2 * œÄ * œÅ‚Çõ))^(1/3)
    logŒõ = 3
    Œæ = 0.58
    M = m‚ÇÅ + m‚ÇÇ
    c_gw = 64 * G‚Çô^3 * M * m‚ÇÅ * m‚ÇÇ / (5 * c^5)
    c_df = 8 * œÄ * ‚àö(G‚Çô) * m‚ÇÇ * logŒõ * œÅ‚Çõ * r‚Çõ^Œ≥‚Çõ * Œæ / (‚àö(M) * m‚ÇÅ)
    c_f = c_df / c_gw * (G‚Çô * M / œÄ^2)^((11 - 2*Œ≥‚Çõ) / 6)

    return EdaDress(Œ≥‚Çõ, c_f, ‚Ñ≥(m‚ÇÅ, m‚ÇÇ), Œ¶_c, tÃÉ_c, log((1 + cos(Œπ)^2) / (2*d‚Çó)))
end

values(system::EdaDress) = (fn -> getfield(system, fn)).(fieldnames(EdaDress))
collect(system::EdaDress) = values(system)
length(system::EdaDress) = length(values(system))

œà·µ•(system::EdaDress) = 1/16 * (c^3 / (œÄ * G‚Çô * system.‚Ñ≥))^(5/3)

# Computing the phase
function Œ¶_indef(f, system::EdaDress)
    b = 5 / (11 - 2 * system.Œ±)
    z = -system.c_f * f^((2 * system.Œ± - 11) / 3)
    return œà·µ•(system) / f^(5/3) * _‚ÇÇF‚ÇÅ(1, b, 1 + b, z)
end

function t_to_c_indef(f, system::EdaDress)
    b = 8 / (11 - 2 * system.Œ±)
    z = -system.c_f * f^((2 * system.Œ± - 11) / 3)
    return 5 * œà·µ•(system) / (16 * œÄ * f^(8/3)) * _‚ÇÇF‚ÇÅ(1, b, 1 + b, z)
end

Œ¶_to_c(f, f_c, system::EdaDress) = Œ¶_indef(f, system) - Œ¶_indef(f_c, system)
t_to_c(f, f_c, system::EdaDress) = t_to_c_indef(f, system) - t_to_c_indef(f_c, system)
Œ¶ÃÉ(f, f_c, system::EdaDress) = 2 * œÄ * f * t_to_c(f, f_c, system) - Œ¶_to_c(f, f_c, system)
Œ®(f, f_c, system::EdaDress) = 2 * œÄ * f * system.tÃÉ_c - system.Œ¶_c - œÄ/4 - Œ¶ÃÉ(f, f_c, system)

# TODO: check!!!
# ùíú(system::EdaDress) = ‚àö(5/24) / œÄ^(2/3) * c / system.d‚Çó * (G‚Çô * system.‚Ñ≥ / c^3)^(5/6) * (1 + cos(system.Œπ)^2) / 2
function amp‚Çä(f, system::EdaDress)
    # d¬≤Œ¶_dt¬≤ = 4 * œÄ^2 * f / gradient(f -> Œ¶_to_c(f, f_c, system), f)  # slow and broken
    d¬≤Œ¶_dt¬≤ = 12 * œÄ^2 * (f^(11/3) + system.c_f * f^(2 * system.Œ± / 3)) / (5 * œà·µ•(system))
    h‚ÇÄ = 1/2 * 4 * œÄ^(2/3) * (G‚Çô * system.‚Ñ≥)^(5/3) * f^(2/3) / c^4 * ‚àö(2 * œÄ / d¬≤Œ¶_dt¬≤)
    return h‚ÇÄ * exp(system.d‚Çó_Œπ)
end

function fim_integrand_num(f, f_c, system::EdaDress)
    ‚àÇamp‚Çä = collect(values(gradient(s -> amp‚Çä(f, s), system)[1]))
    ‚àÇamp‚Çä[‚àÇamp‚Çä .=== nothing] .= 0.
    ‚àÇamp‚Çä = convert(Array{Float64}, ‚àÇamp‚Çä)

    ‚àÇŒ® = collect(values(gradient(s -> Œ®(f, f_c, s), system)[1]))
    ‚àÇŒ®[‚àÇŒ® .=== nothing] .= 0.
    ‚àÇŒ® = convert(Array{Float64}, ‚àÇŒ®)

    # # Convert to log derivatives for intrinsic parameters
    rescaling = [system.Œ±, system.c_f, system.‚Ñ≥, 1., 1., 1.]
    ‚àÇamp‚Çä .*= rescaling
    ‚àÇŒ® .*= rescaling
    
    return 4 * (‚àÇamp‚Çä * ‚àÇamp‚Çä' + amp‚Çä(f, system)^2 * ‚àÇŒ® * ‚àÇŒ®')
end

# Specialize to LISA
S‚Çô_LISA(f) = 1 / f^14 * 1.80654e-17 * (0.000606151 + f^2) * (3.6864e-76 + 3.6e-37 * f^8 + 2.25e-30 * f^10 + 8.66941e-21 * f^14)

# From here on, I assume f‚Çï = f_c
function fim(f‚Çó, f‚Çï, f_c, system::EdaDress, n)
    fs = geomspace(f‚Çó, f‚Çï, n)
    integrand(f) =  fim_integrand_num(f, f_c, system) / S‚Çô_LISA(f)
    return trapz_1d_mat(fs, integrand.(fs))
end

function fim_uncertainties(f‚Çó, f‚Çï, f_c, system::EdaDress, n=1000)
    Œì = fim(f‚Çó, f‚Çï, f_c, system, n)
    Œì = (Œì .+ Œì') ./ 2

    # Improve stability
    scales = sqrt(inv(Diagonal(Œì)))
    Œìr = scales * Œì * scales
    Œ£ = scales * inv(Œìr) * scales

    # Checks
    @assert all(eigvals(Œìr) .> 0) eigvals(Œìr)

    return sqrt.([Œ£[i, i] for i in 1:size(Œ£)[1]])
end

function sig_noise_ratio(f‚Çó, f‚Çï, system::EdaDress, n::Int=5000)
    fs = geomspace(f‚Çó, f‚Çï, n)
    integrand(f) = amp‚Çä(f, system)^2 / S‚Çô_LISA(f)
    return ‚àö(4 * trapz(fs, integrand.(fs)))
end

f‚Çó = 2.26e-2  # frequency 5 years before merger (HACKY ESTIMATE)
f‚Çï = 4.39701  # ISCO frequency (HACKY ESTIMATE)
system = make_EdaDress(226., 7/3)
println("log10(ŒîŒ≥‚Çõ / Œ≥‚Çõ) = ", log10(fim_uncertainties(f‚Çó, f‚Çï, f‚Çï, system, 100)[1]))
println("log10(c_f / c_f) = ", log10(fim_uncertainties(f‚Çó, f‚Çï, f‚Çï, system, 100)[2]))
println("log10(Œî‚Ñ≥ / ‚Ñ≥) = ", log10(fim_uncertainties(f‚Çó, f‚Çï, f‚Çï, system, 100)[3]))
sig_noise_ratio(f‚Çó, f‚Çï, system, 1000)  # agrees with David's notebook

function plot_snr()
    log10_œÅ‚Çõs = -2:0.2:3
    Œ≥‚Çõs = 1.9:0.02:7/3

    f‚Çï = f_c = f_isco(1e3 * MSun)
    t_c = 5.0 * 365 * 24 * 3600  # scales
    f‚Çó = find_zero(f -> t_to_c(f, f_c, system) - t_c, (0.001 * f_c, f_c))

    heatmap(
        log10_œÅ‚Çõs,
        Œ≥‚Çõs,
        (log10_œÅ‚Çõ, Œ≥‚Çõ) -> sig_noise_ratio(f‚Çó, f‚Çï, f_c, make_EdaDress(10^log10_œÅ‚Çõ, Œ≥‚Çõ)),
        clim=(8.5, 9.1),
        size=(550, 500)
    )
    xaxis!(L"\log_{10} \rho_s")
    yaxis!(L"\gamma_s")
end

function plot_uncertainties(i)
    log10_œÅ‚Çõs = -2:0.3:3
    Œ≥‚Çõs = 1.9:0.03:7/3

    f‚Çï = f_c = f_isco(1e3 * MSun)
    t_c = 5.0 * 365 * 24 * 3600  # scales
    f‚Çó = find_zero(f -> t_to_c(f, f_c, system) - t_c, (0.001 * f_c, f_c))

    fn(log10_œÅ‚Çõ, Œ≥‚Çõ) = log10(fim_uncertainties(f‚Çó, f‚Çï, f‚Çï, make_EdaDress(10.0^log10_œÅ‚Çõ, Œ≥‚Çõ), 40)[i])

    # heatmap(log10_œÅ‚Çõs, Œ≥‚Çõs, fn, fillcolor=cgrad(:inferno, rev=true), size=(550, 500))
    contour(log10_œÅ‚Çõs, Œ≥‚Çõs, fn, fill=true, fillcolor=cgrad(:inferno, rev=true), size=(550, 500))
    xaxis!(L"\log_{10} \rho_s", (minimum(log10_œÅ‚Çõs), maximum(log10_œÅ‚Çõs)))
    yaxis!(L"\gamma_s", (minimum(Œ≥‚Çõs), maximum(Œ≥‚Çõs)))
    title!("$(fieldnames(EdaDress)[i])")
end